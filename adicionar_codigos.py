#!/usr/bin/env python3
"""
Script para adicionar m√∫ltiplos c√≥digos de res√≠duos de uma vez
Facilita a adi√ß√£o em massa de novos c√≥digos na planilha e no JSON
"""

import openpyxl
import json
import sys
import os

def adicionar_codigos_excel(excel_file, novos_codigos):
    """Adiciona c√≥digos na planilha Excel"""
    
    print("=" * 60)
    print("üìä ADICIONANDO C√ìDIGOS NA PLANILHA EXCEL")
    print("=" * 60)
    print()
    
    if not os.path.exists(excel_file):
        print(f"‚ùå Erro: Arquivo {excel_file} n√£o encontrado!")
        return False
    
    try:
        wb = openpyxl.load_workbook(excel_file)
        
        if 'Cadastro de Res√≠duos' not in wb.sheetnames:
            print(f"‚ùå Erro: Aba 'Cadastro de Res√≠duos' n√£o encontrada!")
            return False
        
        ws = wb['Cadastro de Res√≠duos']
        
        # Encontrar √∫ltima linha com dados
        ultima_linha = ws.max_row
        print(f"üìç √öltima linha atual: {ultima_linha}")
        print()
        
        # Verificar c√≥digos duplicados
        codigos_existentes = set()
        for row in range(2, ultima_linha + 1):
            codigo = ws[f'A{row}'].value
            if codigo:
                codigos_existentes.add(str(codigo).strip().upper())
        
        print(f"üìã C√≥digos existentes: {len(codigos_existentes)}")
        print()
        
        # Adicionar novos c√≥digos
        adicionados = 0
        duplicados = 0
        
        for codigo, descricao in novos_codigos:
            codigo_upper = str(codigo).strip().upper()
            
            if codigo_upper in codigos_existentes:
                print(f"‚ö†Ô∏è  C√≥digo duplicado (ignorado): {codigo}")
                duplicados += 1
                continue
            
            linha = ultima_linha + adicionados + 1
            ws[f'A{linha}'] = codigo
            ws[f'B{linha}'] = descricao
            
            print(f"‚úÖ Linha {linha}: {codigo} - {descricao}")
            
            codigos_existentes.add(codigo_upper)
            adicionados += 1
        
        print()
        
        # Salvar
        if adicionados > 0:
            wb.save(excel_file)
            print(f"üíæ Planilha salva: {excel_file}")
            print(f"‚úÖ C√≥digos adicionados: {adicionados}")
        else:
            print(f"‚ö†Ô∏è  Nenhum c√≥digo novo para adicionar")
        
        if duplicados > 0:
            print(f"‚ö†Ô∏è  C√≥digos duplicados ignorados: {duplicados}")
        
        print()
        return adicionados > 0
        
    except Exception as e:
        print(f"‚ùå Erro ao processar planilha: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def adicionar_codigos_json(json_file, novos_codigos):
    """Adiciona c√≥digos no arquivo JSON"""
    
    print("=" * 60)
    print("üìÑ ADICIONANDO C√ìDIGOS NO ARQUIVO JSON")
    print("=" * 60)
    print()
    
    if not os.path.exists(json_file):
        print(f"‚ö†Ô∏è  Arquivo {json_file} n√£o encontrado")
        print(f"üí° Criando estrutura nova...")
        dados = {
            'kpis': {},
            'lancamentos': [],
            'resumo': [],
            'top10': [],
            'cadastro': [],
            'destinacoes': []
        }
    else:
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                dados = json.load(f)
        except Exception as e:
            print(f"‚ùå Erro ao ler JSON: {str(e)}")
            return False
    
    # Verificar c√≥digos existentes
    codigos_existentes = set()
    for item in dados.get('cadastro', []):
        codigo = item.get('codigo', '')
        if codigo:
            codigos_existentes.add(str(codigo).strip().upper())
    
    print(f"üìã C√≥digos existentes no JSON: {len(codigos_existentes)}")
    print()
    
    # Adicionar novos c√≥digos
    adicionados = 0
    duplicados = 0
    
    for codigo, descricao in novos_codigos:
        codigo_upper = str(codigo).strip().upper()
        
        if codigo_upper in codigos_existentes:
            print(f"‚ö†Ô∏è  C√≥digo duplicado (ignorado): {codigo}")
            duplicados += 1
            continue
        
        dados['cadastro'].append({
            'codigo': codigo,
            'descricao': descricao
        })
        
        print(f"‚úÖ Adicionado: {codigo} - {descricao}")
        
        codigos_existentes.add(codigo_upper)
        adicionados += 1
    
    print()
    
    # Salvar
    if adicionados > 0:
        try:
            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(dados, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ JSON salvo: {json_file}")
            print(f"‚úÖ C√≥digos adicionados: {adicionados}")
        except Exception as e:
            print(f"‚ùå Erro ao salvar JSON: {str(e)}")
            return False
    else:
        print(f"‚ö†Ô∏è  Nenhum c√≥digo novo para adicionar")
    
    if duplicados > 0:
        print(f"‚ö†Ô∏è  C√≥digos duplicados ignorados: {duplicados}")
    
    print()
    return adicionados > 0

def main():
    """Fun√ß√£o principal"""
    
    print()
    print("=" * 60)
    print("üîß FERRAMENTA DE ADI√á√ÉO DE C√ìDIGOS DE RES√çDUOS")
    print("=" * 60)
    print()
    
    # ============================================================
    # CONFIGURA√á√ÉO: EDITE AQUI PARA ADICIONAR SEUS C√ìDIGOS
    # ============================================================
    
    novos_codigos = [
        # Formato: ('C√ìDIGO', 'Descri√ß√£o do res√≠duo')
        
        # Exemplos:
        ('X100', 'Res√≠duo de borracha vulcanizada'),
        ('X101', 'Filtros de ar condicionado'),
        ('X102', 'L√¢mpadas fluorescentes queimadas'),
        ('X103', 'Cartuchos de impressora vazios'),
        ('X104', 'Toner de impressora usado'),
        
        # Adicione mais c√≥digos aqui:
        # ('X105', 'Seu res√≠duo aqui'),
        # ('X106', 'Outro res√≠duo'),
    ]
    
    # ============================================================
    # FIM DA CONFIGURA√á√ÉO
    # ============================================================
    
    if not novos_codigos:
        print("‚ö†Ô∏è  Nenhum c√≥digo para adicionar!")
        print("üí° Edite este script e adicione c√≥digos na lista 'novos_codigos'")
        print()
        return
    
    print(f"üìù C√≥digos a adicionar: {len(novos_codigos)}")
    print()
    
    for codigo, descricao in novos_codigos:
        print(f"   ‚Ä¢ {codigo} - {descricao}")
    
    print()
    print("=" * 60)
    print()
    
    # Confirmar
    resposta = input("Deseja continuar? (s/n): ").strip().lower()
    if resposta != 's':
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return
    
    print()
    
    # Adicionar na planilha
    excel_file = 'Controle_Residuos_Industriais.xlsx'
    sucesso_excel = adicionar_codigos_excel(excel_file, novos_codigos)
    
    print("=" * 60)
    print()
    
    # Adicionar no JSON
    json_file = 'dashboard/dados_residuos.json'
    sucesso_json = adicionar_codigos_json(json_file, novos_codigos)
    
    print("=" * 60)
    print()
    
    # Resumo final
    if sucesso_excel or sucesso_json:
        print("‚úÖ PROCESSO CONCLU√çDO COM SUCESSO!")
        print()
        print("üìã Pr√≥ximos passos:")
        print()
        
        if sucesso_excel:
            print("   1. Abrir a planilha Excel")
            print("   2. Verificar aba 'Cadastro de Res√≠duos'")
            print("   3. Testar na aba 'Lan√ßamentos'")
            print()
        
        if sucesso_json:
            print("   4. Recarregar dashboard no navegador (F5)")
            print("   5. Clicar em 'Novo Lan√ßamento'")
            print("   6. Verificar se novos c√≥digos aparecem")
            print()
        
        print("   7. Se dashboard est√° online, fazer deploy:")
        print("      cd dashboard")
        print("      git add .")
        print("      git commit -m 'Novos c√≥digos de res√≠duos'")
        print("      git push")
        print()
    else:
        print("‚ö†Ô∏è  Nenhuma altera√ß√£o foi feita")
        print()
    
    print("=" * 60)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Opera√ß√£o cancelada pelo usu√°rio (Ctrl+C)")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {str(e)}")
        import traceback
        traceback.print_exc()

