#!/usr/bin/env python3
"""
Script para atualizar planilha para vers√£o 3.0
- Adiciona coluna "Unidade" nos lan√ßamentos
- Cria aba "Cadastro de Destinat√°rios"
- Cria aba "Cadastro de Transportadores"
- Adiciona campos de destinat√°rio e transportador nos lan√ßamentos
"""

import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.worksheet.datavalidation import DataValidation
from datetime import datetime

def criar_estilo_cabecalho():
    """Retorna estilos para cabe√ßalho"""
    return {
        'font': Font(name='Calibri', size=11, bold=True, color='FFFFFF'),
        'fill': PatternFill(start_color='808080', end_color='808080', fill_type='solid'),
        'alignment': Alignment(horizontal='center', vertical='center'),
        'border': Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
    }

def criar_estilo_celula():
    """Retorna estilos para c√©lulas normais"""
    return {
        'font': Font(name='Calibri', size=11),
        'alignment': Alignment(horizontal='left', vertical='center'),
        'border': Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
    }

def atualizar_aba_lancamentos(wb):
    """Atualiza aba Lan√ßamentos com coluna Unidade e novos campos"""
    
    print("üìä Atualizando aba 'Lan√ßamentos'...")
    
    ws = wb['Lan√ßamentos']
    
    # Salvar dados existentes
    dados_existentes = []
    for row in range(2, ws.max_row + 1):
        if ws[f'A{row}'].value:  # Se tem c√≥digo
            dados_existentes.append({
                'codigo': ws[f'A{row}'].value,
                'descricao': ws[f'B{row}'].value,
                'quantidade': ws[f'C{row}'].value,
                'data': ws[f'D{row}'].value,
                'destinacao': ws[f'E{row}'].value,
                'observacoes': ws[f'F{row}'].value
            })
    
    print(f"   üì¶ Dados existentes salvos: {len(dados_existentes)} lan√ßamentos")
    
    # Limpar planilha
    ws.delete_rows(1, ws.max_row)
    
    # Novos cabe√ßalhos
    cabecalhos = [
        'C√≥digo do\nRes√≠duo',
        'Descri√ß√£o do\nRes√≠duo',
        'Quantidade',
        'Unidade',
        'Data de\nGera√ß√£o',
        'Destina√ß√£o',
        'Destinat√°rio',
        'Transportador',
        'Observa√ß√µes'
    ]
    
    # Escrever cabe√ßalhos
    estilo_cab = criar_estilo_cabecalho()
    for col, titulo in enumerate(cabecalhos, 1):
        celula = ws.cell(row=1, column=col, value=titulo)
        celula.font = estilo_cab['font']
        celula.fill = estilo_cab['fill']
        celula.alignment = estilo_cab['alignment']
        celula.border = estilo_cab['border']
    
    # Ajustar altura da linha de cabe√ßalho
    ws.row_dimensions[1].height = 30
    
    # Ajustar larguras das colunas
    larguras = {
        'A': 15,  # C√≥digo
        'B': 35,  # Descri√ß√£o
        'C': 12,  # Quantidade
        'D': 10,  # Unidade
        'E': 12,  # Data
        'F': 15,  # Destina√ß√£o
        'G': 30,  # Destinat√°rio
        'H': 30,  # Transportador
        'I': 40   # Observa√ß√µes
    }
    
    for col, largura in larguras.items():
        ws.column_dimensions[col].width = largura
    
    # Restaurar dados existentes
    estilo_cel = criar_estilo_celula()
    
    for idx, dados in enumerate(dados_existentes, 2):
        # C√≥digo
        ws[f'A{idx}'] = dados['codigo']
        
        # Descri√ß√£o (f√≥rmula PROCV)
        ws[f'B{idx}'] = f"=IFERROR(VLOOKUP(A{idx},'Cadastro de Res√≠duos'!A:B,2,FALSE),\"\")"
        
        # Quantidade
        ws[f'C{idx}'] = dados['quantidade']
        ws[f'C{idx}'].number_format = '#,##0.00'
        
        # Unidade (padr√£o: kg)
        ws[f'D{idx}'] = 'kg'
        
        # Data
        ws[f'E{idx}'] = dados['data']
        if isinstance(dados['data'], datetime):
            ws[f'E{idx}'].number_format = 'DD/MM/YYYY'
        
        # Destina√ß√£o
        ws[f'F{idx}'] = dados['destinacao']
        
        # Destinat√°rio (vazio por enquanto)
        ws[f'G{idx}'] = ''
        
        # Transportador (vazio por enquanto)
        ws[f'H{idx}'] = ''
        
        # Observa√ß√µes
        ws[f'I{idx}'] = dados['observacoes']
        
        # Aplicar estilos
        for col in 'ABCDEFGHI':
            celula = ws[f'{col}{idx}']
            celula.font = estilo_cel['font']
            celula.border = estilo_cel['border']
            if col in ['A', 'D', 'E', 'F']:
                celula.alignment = Alignment(horizontal='center', vertical='center')
            else:
                celula.alignment = estilo_cel['alignment']
    
    # Adicionar linhas vazias com f√≥rmulas (at√© linha 1000)
    for row in range(len(dados_existentes) + 2, 1001):
        # Descri√ß√£o (f√≥rmula PROCV)
        ws[f'B{row}'] = f"=IFERROR(VLOOKUP(A{row},'Cadastro de Res√≠duos'!A:B,2,FALSE),\"\")"
        
        # Unidade padr√£o
        ws[f'D{row}'] = 'kg'
        
        # Aplicar estilos
        for col in 'ABCDEFGHI':
            celula = ws[f'{col}{row}']
            celula.font = estilo_cel['font']
            celula.border = estilo_cel['border']
    
    # Valida√ß√£o de dados - C√≥digo do Res√≠duo
    dv_codigo = DataValidation(
        type="list",
        formula1="='Cadastro de Res√≠duos'!$A$2:$A$1000",
        allow_blank=True
    )
    dv_codigo.error = 'C√≥digo inv√°lido'
    dv_codigo.errorTitle = 'C√≥digo n√£o cadastrado'
    dv_codigo.prompt = 'Selecione um c√≥digo da lista'
    dv_codigo.promptTitle = 'C√≥digo do Res√≠duo'
    ws.add_data_validation(dv_codigo)
    dv_codigo.add(f'A2:A1000')
    
    # Valida√ß√£o de dados - Unidade
    dv_unidade = DataValidation(
        type="list",
        formula1='"kg,L,m¬≥,ton,unidade"',
        allow_blank=False
    )
    dv_unidade.error = 'Unidade inv√°lida'
    dv_unidade.errorTitle = 'Unidade n√£o permitida'
    dv_unidade.prompt = 'Selecione: kg, L, m¬≥, ton ou unidade'
    dv_unidade.promptTitle = 'Unidade de Medida'
    ws.add_data_validation(dv_unidade)
    dv_unidade.add(f'D2:D1000')
    
    # Valida√ß√£o de dados - Destina√ß√£o
    dv_destinacao = DataValidation(
        type="list",
        formula1='"Reciclagem,Reuso,Aterro,Coprocessamento,Incinera√ß√£o,Tratamento,Compostagem,Outro"',
        allow_blank=True
    )
    dv_destinacao.error = 'Destina√ß√£o inv√°lida'
    dv_destinacao.errorTitle = 'Destina√ß√£o n√£o permitida'
    dv_destinacao.prompt = 'Selecione uma destina√ß√£o da lista'
    dv_destinacao.promptTitle = 'Tipo de Destina√ß√£o'
    ws.add_data_validation(dv_destinacao)
    dv_destinacao.add(f'F2:F1000')
    
    # Valida√ß√£o de dados - Destinat√°rio
    dv_destinatario = DataValidation(
        type="list",
        formula1="='Cadastro de Destinat√°rios'!$A$2:$A$1000",
        allow_blank=True
    )
    dv_destinatario.error = 'Destinat√°rio inv√°lido'
    dv_destinatario.errorTitle = 'Destinat√°rio n√£o cadastrado'
    dv_destinatario.prompt = 'Selecione um destinat√°rio da lista'
    dv_destinatario.promptTitle = 'Destinat√°rio'
    ws.add_data_validation(dv_destinatario)
    dv_destinatario.add(f'G2:G1000')
    
    # Valida√ß√£o de dados - Transportador
    dv_transportador = DataValidation(
        type="list",
        formula1="='Cadastro de Transportadores'!$A$2:$A$1000",
        allow_blank=True
    )
    dv_transportador.error = 'Transportador inv√°lido'
    dv_transportador.errorTitle = 'Transportador n√£o cadastrado'
    dv_transportador.prompt = 'Selecione um transportador da lista'
    dv_transportador.promptTitle = 'Transportador'
    ws.add_data_validation(dv_transportador)
    dv_transportador.add(f'H2:H1000')
    
    # Congelar pain√©is
    ws.freeze_panes = 'A2'
    
    # Ativar filtros
    ws.auto_filter.ref = f'A1:I1000'
    
    print("   ‚úÖ Aba 'Lan√ßamentos' atualizada com sucesso!")
    print(f"   ‚úÖ {len(dados_existentes)} lan√ßamentos restaurados")
    print("   ‚úÖ Coluna 'Unidade' adicionada")
    print("   ‚úÖ Colunas 'Destinat√°rio' e 'Transportador' adicionadas")

def criar_aba_destinatarios(wb):
    """Cria aba Cadastro de Destinat√°rios"""
    
    print("\nüè¢ Criando aba 'Cadastro de Destinat√°rios'...")
    
    # Criar nova aba
    if 'Cadastro de Destinat√°rios' in wb.sheetnames:
        del wb['Cadastro de Destinat√°rios']
    
    ws = wb.create_sheet('Cadastro de Destinat√°rios')
    
    # Cabe√ßalhos
    cabecalhos = [
        'Nome da Empresa',
        'CNPJ',
        'Endere√ßo',
        'CEP',
        'Cidade',
        'Estado',
        'N¬∫ Licen√ßa de\nOpera√ß√£o',
        'Validade da\nLicen√ßa',
        'Telefone',
        'E-mail',
        'Observa√ß√µes'
    ]
    
    # Escrever cabe√ßalhos
    estilo_cab = criar_estilo_cabecalho()
    for col, titulo in enumerate(cabecalhos, 1):
        celula = ws.cell(row=1, column=col, value=titulo)
        celula.font = estilo_cab['font']
        celula.fill = estilo_cab['fill']
        celula.alignment = estilo_cab['alignment']
        celula.border = estilo_cab['border']
    
    # Ajustar altura da linha de cabe√ßalho
    ws.row_dimensions[1].height = 30
    
    # Ajustar larguras das colunas
    larguras = {
        'A': 35,  # Nome
        'B': 18,  # CNPJ
        'C': 40,  # Endere√ßo
        'D': 12,  # CEP
        'E': 20,  # Cidade
        'F': 8,   # Estado
        'G': 20,  # N¬∫ Licen√ßa
        'H': 15,  # Validade
        'I': 15,  # Telefone
        'J': 30,  # E-mail
        'K': 40   # Observa√ß√µes
    }
    
    for col, largura in larguras.items():
        ws.column_dimensions[col].width = largura
    
    # Adicionar exemplos
    exemplos = [
        {
            'nome': 'EcoRecicla Ltda',
            'cnpj': '12.345.678/0001-90',
            'endereco': 'Rua das Ind√∫strias, 1000',
            'cep': '01234-567',
            'cidade': 'S√£o Paulo',
            'estado': 'SP',
            'licenca': 'LO-2024-001',
            'validade': datetime(2025, 12, 31),
            'telefone': '(11) 3456-7890',
            'email': 'contato@ecorecicla.com.br',
            'obs': 'Especializada em reciclagem de metais'
        },
        {
            'nome': 'Aterro Sanit√°rio Central',
            'cnpj': '98.765.432/0001-10',
            'endereco': 'Rodovia BR-101, km 45',
            'cep': '98765-432',
            'cidade': 'Guarulhos',
            'estado': 'SP',
            'licenca': 'LO-2024-002',
            'validade': datetime(2026, 6, 30),
            'telefone': '(11) 2345-6789',
            'email': 'operacao@aterrocentral.com.br',
            'obs': 'Aterro classe II-A'
        },
        {
            'nome': 'Tratamento de Res√≠duos S/A',
            'cnpj': '11.222.333/0001-44',
            'endereco': 'Av. Industrial, 500',
            'cep': '13000-000',
            'cidade': 'Campinas',
            'estado': 'SP',
            'licenca': 'ISENTO',
            'validade': None,
            'telefone': '(19) 3333-4444',
            'email': 'comercial@tratamentoresiduos.com.br',
            'obs': 'Tratamento de res√≠duos qu√≠micos'
        }
    ]
    
    estilo_cel = criar_estilo_celula()
    
    for idx, exemplo in enumerate(exemplos, 2):
        ws[f'A{idx}'] = exemplo['nome']
        ws[f'B{idx}'] = exemplo['cnpj']
        ws[f'C{idx}'] = exemplo['endereco']
        ws[f'D{idx}'] = exemplo['cep']
        ws[f'E{idx}'] = exemplo['cidade']
        ws[f'F{idx}'] = exemplo['estado']
        ws[f'G{idx}'] = exemplo['licenca']
        ws[f'H{idx}'] = exemplo['validade']
        if exemplo['validade']:
            ws[f'H{idx}'].number_format = 'DD/MM/YYYY'
        ws[f'I{idx}'] = exemplo['telefone']
        ws[f'J{idx}'] = exemplo['email']
        ws[f'K{idx}'] = exemplo['obs']
        
        # Aplicar estilos
        for col in 'ABCDEFGHIJK':
            celula = ws[f'{col}{idx}']
            celula.font = estilo_cel['font']
            celula.border = estilo_cel['border']
            if col in ['B', 'D', 'F', 'G', 'H', 'I']:
                celula.alignment = Alignment(horizontal='center', vertical='center')
            else:
                celula.alignment = estilo_cel['alignment']
    
    # Adicionar linhas vazias com formata√ß√£o (at√© linha 100)
    for row in range(5, 101):
        for col in 'ABCDEFGHIJK':
            celula = ws[f'{col}{row}']
            celula.font = estilo_cel['font']
            celula.border = estilo_cel['border']
    
    # Valida√ß√£o de dados - Estado
    dv_estado = DataValidation(
        type="list",
        formula1='"AC,AL,AP,AM,BA,CE,DF,ES,GO,MA,MT,MS,MG,PA,PB,PR,PE,PI,RJ,RN,RS,RO,RR,SC,SP,SE,TO"',
        allow_blank=True
    )
    dv_estado.error = 'Estado inv√°lido'
    dv_estado.errorTitle = 'UF n√£o encontrada'
    dv_estado.prompt = 'Selecione a UF do estado'
    dv_estado.promptTitle = 'Estado (UF)'
    ws.add_data_validation(dv_estado)
    dv_estado.add(f'F2:F100')
    
    # Congelar pain√©is
    ws.freeze_panes = 'A2'
    
    # Ativar filtros
    ws.auto_filter.ref = f'A1:K100'
    
    print("   ‚úÖ Aba 'Cadastro de Destinat√°rios' criada!")
    print(f"   ‚úÖ {len(exemplos)} destinat√°rios de exemplo adicionados")

def criar_aba_transportadores(wb):
    """Cria aba Cadastro de Transportadores"""
    
    print("\nüöõ Criando aba 'Cadastro de Transportadores'...")
    
    # Criar nova aba
    if 'Cadastro de Transportadores' in wb.sheetnames:
        del wb['Cadastro de Transportadores']
    
    ws = wb.create_sheet('Cadastro de Transportadores')
    
    # Cabe√ßalhos
    cabecalhos = [
        'Nome da Empresa',
        'CNPJ',
        'Endere√ßo',
        'CEP',
        'Cidade',
        'Estado',
        'N¬∫ Licen√ßa de\nOpera√ß√£o',
        'Validade da\nLicen√ßa',
        'Telefone',
        'E-mail',
        'Observa√ß√µes'
    ]
    
    # Escrever cabe√ßalhos
    estilo_cab = criar_estilo_cabecalho()
    for col, titulo in enumerate(cabecalhos, 1):
        celula = ws.cell(row=1, column=col, value=titulo)
        celula.font = estilo_cab['font']
        celula.fill = estilo_cab['fill']
        celula.alignment = estilo_cab['alignment']
        celula.border = estilo_cab['border']
    
    # Ajustar altura da linha de cabe√ßalho
    ws.row_dimensions[1].height = 30
    
    # Ajustar larguras das colunas
    larguras = {
        'A': 35,  # Nome
        'B': 18,  # CNPJ
        'C': 40,  # Endere√ßo
        'D': 12,  # CEP
        'E': 20,  # Cidade
        'F': 8,   # Estado
        'G': 20,  # N¬∫ Licen√ßa
        'H': 15,  # Validade
        'I': 15,  # Telefone
        'J': 30,  # E-mail
        'K': 40   # Observa√ß√µes
    }
    
    for col, largura in larguras.items():
        ws.column_dimensions[col].width = largura
    
    # Adicionar exemplos
    exemplos = [
        {
            'nome': 'TransRes√≠duos Transportes Ltda',
            'cnpj': '22.333.444/0001-55',
            'endereco': 'Av. Log√≠stica, 2000',
            'cep': '02000-000',
            'cidade': 'S√£o Paulo',
            'estado': 'SP',
            'licenca': 'LT-2024-010',
            'validade': datetime(2025, 10, 15),
            'telefone': '(11) 4567-8901',
            'email': 'operacional@transresiduos.com.br',
            'obs': 'Transporte de res√≠duos classe I e II'
        },
        {
            'nome': 'Log√≠stica Ambiental Express',
            'cnpj': '33.444.555/0001-66',
            'endereco': 'Rua dos Transportes, 300',
            'cep': '13100-000',
            'cidade': 'Campinas',
            'estado': 'SP',
            'licenca': 'LT-2024-011',
            'validade': datetime(2026, 3, 20),
            'telefone': '(19) 2222-3333',
            'email': 'contato@logambiental.com.br',
            'obs': 'Frota com rastreamento GPS'
        },
        {
            'nome': 'EcoTrans Solu√ß√µes Ambientais',
            'cnpj': '44.555.666/0001-77',
            'endereco': 'Rod. Anhanguera, km 100',
            'cep': '14000-000',
            'cidade': 'Jundia√≠',
            'estado': 'SP',
            'licenca': 'ISENTO',
            'validade': None,
            'telefone': '(11) 5555-6666',
            'email': 'comercial@ecotrans.com.br',
            'obs': 'Especializada em res√≠duos hospitalares'
        }
    ]
    
    estilo_cel = criar_estilo_celula()
    
    for idx, exemplo in enumerate(exemplos, 2):
        ws[f'A{idx}'] = exemplo['nome']
        ws[f'B{idx}'] = exemplo['cnpj']
        ws[f'C{idx}'] = exemplo['endereco']
        ws[f'D{idx}'] = exemplo['cep']
        ws[f'E{idx}'] = exemplo['cidade']
        ws[f'F{idx}'] = exemplo['estado']
        ws[f'G{idx}'] = exemplo['licenca']
        ws[f'H{idx}'] = exemplo['validade']
        if exemplo['validade']:
            ws[f'H{idx}'].number_format = 'DD/MM/YYYY'
        ws[f'I{idx}'] = exemplo['telefone']
        ws[f'J{idx}'] = exemplo['email']
        ws[f'K{idx}'] = exemplo['obs']
        
        # Aplicar estilos
        for col in 'ABCDEFGHIJK':
            celula = ws[f'{col}{idx}']
            celula.font = estilo_cel['font']
            celula.border = estilo_cel['border']
            if col in ['B', 'D', 'F', 'G', 'H', 'I']:
                celula.alignment = Alignment(horizontal='center', vertical='center')
            else:
                celula.alignment = estilo_cel['alignment']
    
    # Adicionar linhas vazias com formata√ß√£o (at√© linha 100)
    for row in range(5, 101):
        for col in 'ABCDEFGHIJK':
            celula = ws[f'{col}{row}']
            celula.font = estilo_cel['font']
            celula.border = estilo_cel['border']
    
    # Valida√ß√£o de dados - Estado
    dv_estado = DataValidation(
        type="list",
        formula1='"AC,AL,AP,AM,BA,CE,DF,ES,GO,MA,MT,MS,MG,PA,PB,PR,PE,PI,RJ,RN,RS,RO,RR,SC,SP,SE,TO"',
        allow_blank=True
    )
    dv_estado.error = 'Estado inv√°lido'
    dv_estado.errorTitle = 'UF n√£o encontrada'
    dv_estado.prompt = 'Selecione a UF do estado'
    dv_estado.promptTitle = 'Estado (UF)'
    ws.add_data_validation(dv_estado)
    dv_estado.add(f'F2:F100')
    
    # Congelar pain√©is
    ws.freeze_panes = 'A2'
    
    # Ativar filtros
    ws.auto_filter.ref = f'A1:K100'
    
    print("   ‚úÖ Aba 'Cadastro de Transportadores' criada!")
    print(f"   ‚úÖ {len(exemplos)} transportadores de exemplo adicionados")

def main():
    """Fun√ß√£o principal"""
    
    print()
    print("=" * 70)
    print("üîÑ ATUALIZA√á√ÉO PARA VERS√ÉO 3.0")
    print("=" * 70)
    print()
    print("Melhorias:")
    print("  ‚úÖ Adicionar coluna 'Unidade' nos lan√ßamentos")
    print("  ‚úÖ Criar cadastro de Destinat√°rios")
    print("  ‚úÖ Criar cadastro de Transportadores")
    print("  ‚úÖ Adicionar campos nos lan√ßamentos")
    print()
    print("=" * 70)
    print()
    
    # Abrir planilha
    excel_file = 'Controle_Residuos_Industriais.xlsx'
    
    print(f"üìÇ Abrindo planilha: {excel_file}")
    
    try:
        wb = openpyxl.load_workbook(excel_file)
        print("   ‚úÖ Planilha carregada com sucesso!")
        print()
        
        # Atualizar aba Lan√ßamentos
        atualizar_aba_lancamentos(wb)
        
        # Criar aba Destinat√°rios
        criar_aba_destinatarios(wb)
        
        # Criar aba Transportadores
        criar_aba_transportadores(wb)
        
        # Reordenar abas
        print("\nüìë Reordenando abas...")
        ordem_abas = [
            'Lan√ßamentos',
            'Cadastro de Res√≠duos',
            'Cadastro de Destinat√°rios',
            'Cadastro de Transportadores',
            'Resumo por C√≥digo'
        ]
        
        for aba in wb.sheetnames:
            if aba not in ordem_abas:
                ordem_abas.append(aba)
        
        for idx, nome_aba in enumerate(ordem_abas):
            if nome_aba in wb.sheetnames:
                wb.move_sheet(nome_aba, idx - len(wb.sheetnames))
        
        print("   ‚úÖ Abas reordenadas!")
        
        # Salvar
        print("\nüíæ Salvando planilha...")
        wb.save(excel_file)
        print(f"   ‚úÖ Planilha salva: {excel_file}")
        
        print()
        print("=" * 70)
        print("‚úÖ ATUALIZA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("=" * 70)
        print()
        print("üìã Resumo das altera√ß√µes:")
        print()
        print("  üìä Aba 'Lan√ßamentos':")
        print("     ‚Ä¢ Coluna 'Unidade' adicionada (kg, L, m¬≥, ton, unidade)")
        print("     ‚Ä¢ Coluna 'Destinat√°rio' adicionada")
        print("     ‚Ä¢ Coluna 'Transportador' adicionada")
        print("     ‚Ä¢ Valida√ß√µes de dados configuradas")
        print()
        print("  üè¢ Aba 'Cadastro de Destinat√°rios':")
        print("     ‚Ä¢ Nome, CNPJ, Endere√ßo completo")
        print("     ‚Ä¢ N¬∫ Licen√ßa de Opera√ß√£o (com op√ß√£o ISENTO)")
        print("     ‚Ä¢ Validade da Licen√ßa")
        print("     ‚Ä¢ Telefone, E-mail, Observa√ß√µes")
        print("     ‚Ä¢ 3 exemplos pr√©-cadastrados")
        print()
        print("  üöõ Aba 'Cadastro de Transportadores':")
        print("     ‚Ä¢ Nome, CNPJ, Endere√ßo completo")
        print("     ‚Ä¢ N¬∫ Licen√ßa de Opera√ß√£o (com op√ß√£o ISENTO)")
        print("     ‚Ä¢ Validade da Licen√ßa")
        print("     ‚Ä¢ Telefone, E-mail, Observa√ß√µes")
        print("     ‚Ä¢ 3 exemplos pr√©-cadastrados")
        print()
        print("üí° Pr√≥ximos passos:")
        print("   1. Abrir a planilha Excel")
        print("   2. Verificar novas abas e campos")
        print("   3. Cadastrar seus destinat√°rios e transportadores")
        print("   4. Fazer lan√ßamentos com os novos campos")
        print("   5. Atualizar dashboard web (pr√≥ximo passo)")
        print()
        print("=" * 70)
        
    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo {excel_file} n√£o encontrado!")
        print("üí° Certifique-se de que o arquivo est√° no mesmo diret√≥rio")
    except Exception as e:
        print(f"‚ùå Erro durante atualiza√ß√£o: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()

