#!/usr/bin/env python3
"""
Script de Sincroniza√ß√£o: Dashboard ‚Üí Planilha Excel
Importa dados do JSON exportado do dashboard para a planilha Excel
"""

import json
import openpyxl
from datetime import datetime
import sys
import os

def sync_dashboard_to_excel(json_file, excel_file):
    """Sincroniza dados do dashboard (JSON) para planilha Excel"""
    
    print("=" * 60)
    print("üîÑ SINCRONIZA√á√ÉO: Dashboard ‚Üí Planilha Excel")
    print("=" * 60)
    print()
    
    # Verificar se arquivos existem
    if not os.path.exists(json_file):
        print(f"‚ùå Erro: Arquivo {json_file} n√£o encontrado!")
        print(f"üí° Dica: Exporte os dados do dashboard primeiro")
        return False
    
    if not os.path.exists(excel_file):
        print(f"‚ùå Erro: Arquivo {excel_file} n√£o encontrado!")
        return False
    
    try:
        # Carregar JSON
        print(f"üìÑ Lendo dados de: {json_file}")
        with open(json_file, 'r', encoding='utf-8') as f:
            dados = json.load(f)
        
        total_lancamentos = len(dados.get('lancamentos', []))
        print(f"   ‚úì {total_lancamentos} lan√ßamentos encontrados")
        print()
        
        # Abrir planilha
        print(f"üìä Abrindo planilha: {excel_file}")
        wb = openpyxl.load_workbook(excel_file)
        
        # Verificar se aba existe
        if 'Lan√ßamentos' not in wb.sheetnames:
            print(f"‚ùå Erro: Aba 'Lan√ßamentos' n√£o encontrada!")
            print(f"   Abas dispon√≠veis: {', '.join(wb.sheetnames)}")
            return False
        
        ws = wb['Lan√ßamentos']
        print(f"   ‚úì Aba 'Lan√ßamentos' encontrada")
        print()
        
        # Fazer backup dos dados atuais
        dados_antigos = ws.max_row - 1  # -1 para n√£o contar cabe√ßalho
        print(f"üóëÔ∏è  Limpando {dados_antigos} lan√ßamentos antigos...")
        
        # Limpar dados antigos (manter cabe√ßalho na linha 1)
        if ws.max_row > 1:
            ws.delete_rows(2, ws.max_row)
        print(f"   ‚úì Dados antigos removidos")
        print()
        
        # Adicionar novos lan√ßamentos
        print(f"‚ûï Importando {total_lancamentos} lan√ßamentos...")
        linha = 2
        erros = 0
        
        for idx, lanc in enumerate(dados['lancamentos'], 1):
            try:
                # Coluna A: C√≥digo
                ws[f'A{linha}'] = lanc.get('codigo', '')
                
                # Coluna B: Descri√ß√£o
                ws[f'B{linha}'] = lanc.get('descricao', '')
                
                # Coluna C: Quantidade
                quantidade = lanc.get('quantidade', 0)
                ws[f'C{linha}'] = float(quantidade) if quantidade else 0
                
                # Coluna D: Data
                if lanc.get('data'):
                    try:
                        # Tentar converter string para data
                        data_str = lanc['data']
                        if 'T' in data_str:
                            data_obj = datetime.fromisoformat(data_str.replace('Z', '+00:00'))
                        else:
                            data_obj = datetime.strptime(data_str, '%Y-%m-%d')
                        ws[f'D{linha}'] = data_obj
                    except Exception as e:
                        # Se falhar, usar string mesmo
                        ws[f'D{linha}'] = lanc['data']
                
                # Coluna E: Destina√ß√£o
                ws[f'E{linha}'] = lanc.get('destinacao', '')
                
                # Coluna F: Observa√ß√µes
                ws[f'F{linha}'] = lanc.get('observacoes', '')
                
                linha += 1
                
                # Mostrar progresso a cada 10 lan√ßamentos
                if idx % 10 == 0:
                    print(f"   ‚è≥ Processando... {idx}/{total_lancamentos}")
                
            except Exception as e:
                erros += 1
                print(f"   ‚ö†Ô∏è  Erro no lan√ßamento {idx}: {str(e)}")
        
        print(f"   ‚úì {linha-2} lan√ßamentos importados")
        if erros > 0:
            print(f"   ‚ö†Ô∏è  {erros} erros encontrados")
        print()
        
        # Salvar planilha
        print("üíæ Salvando planilha...")
        wb.save(excel_file)
        print(f"   ‚úì Planilha salva com sucesso")
        print()
        
        # Mostrar resumo
        print("=" * 60)
        print("üìä RESUMO DA SINCRONIZA√á√ÉO")
        print("=" * 60)
        print(f"‚úÖ Lan√ßamentos importados: {linha-2}")
        print(f"üì¶ Total de res√≠duos: {dados['kpis']['total_residuos']:.2f} kg/L/unidades")
        print(f"üóÇÔ∏è  Tipos de res√≠duos: {dados['kpis']['tipos_residuos']}")
        print(f"‚ö†Ô∏è  Maior gerador: {dados['kpis']['maior_gerador_codigo']}")
        print(f"üìÖ √öltima atualiza√ß√£o: {dados.get('ultima_atualizacao', 'N/A')}")
        print()
        print("‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso!")
        print()
        print("üí° Pr√≥ximos passos:")
        print("   1. Abra a planilha Excel")
        print("   2. Verifique a aba 'Lan√ßamentos'")
        print("   3. Confira a aba 'Resumo por C√≥digo'")
        print("   4. Clique no bot√£o 'Atualizar Resumo' se necess√°rio")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print()
        print(f"‚ùå ERRO durante sincroniza√ß√£o: {str(e)}")
        print()
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fun√ß√£o principal"""
    
    # Valores padr√£o
    json_file = 'dados_residuos.json'
    excel_file = 'Controle_Residuos_Industriais.xlsx'
    
    # Aceitar argumentos da linha de comando
    if len(sys.argv) > 1:
        json_file = sys.argv[1]
    if len(sys.argv) > 2:
        excel_file = sys.argv[2]
    
    # Executar sincroniza√ß√£o
    sucesso = sync_dashboard_to_excel(json_file, excel_file)
    
    # Retornar c√≥digo de sa√≠da
    sys.exit(0 if sucesso else 1)

if __name__ == '__main__':
    main()

